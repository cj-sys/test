#접근 제한자#

객체 지향에서는 사용자가 굳이 알 필요가 없는 정보를
사용자로부터 숨겨야한다는 개념이 있는데
이럴 때 쓰는 것이 접근 제한자입니다.

접근제한자를 사용하여 사용자가 알 필요가 없는 정보를 은닉하고 
최소한의 정보만으로 프로그램을 손쉽게 사용할 수 있게 됩니다.

#접근제한자의 종류#

   (-)private :  캡슐화를 위해 사용되는 제한자로 클래스 안에서만 접근이 가능하며
                  클래스 밖에서는 접근이 불가능합니다.(클래스 선언 불가)

   (#)protected : 비 상속시에는 default와 동일하며, 같은 패키지말고는 접근이 제한되며
                     다른 패키지에 있는 클래스일 경우 상속관계의 후손클래스 내에서만
                     부모클래스에 접근할 수 있습니다. (클래스 선언 불가)

   (~)default : 같은 패키지말고는 접근이 제한되며 ,
                  접근 제한자가 없다면 자동으로 default접근 제한을 가지게됩니다.

   (+)public : 클래스와 패키지 안과 밖에있는 모든 클래스들이 접근가능합니다.

   접근제어자의 공개범위는 public >protected >default>private로 private가 가장 낮고
   public이 가장 높습니다.



****class접근 제한자****

class의 접근제한자는 public과 default 2가지만 쓸 수있습니다.
만약 class 앞에 public이 없다면 자동으로 default class가 되며,같은 패키지 외에는
접근이 불가하게됩니다.

****method접근 제한자****
모든 접근제한자를 쓸 수 있습니다.

****지역변수 접근 제한자****
지역변수에는 접근 제한자를 쓸 수 없습니다.


****필드 접근 제한자****
필드는 객체의 정보(상태)를 나타내는 것이며,
클래스 안에서 선언되는 멤버 변수를 필드(field)라고 합니다.                        //이미 앞에서 언급
필드를 선언할 때는 접근제한자->필드타입->필드변수명 순으로 선언해주며		  //이미 언급								
모든 접근제어자가 올 수 있지만 정보은닉의 목적으로 private를 가장 많이 씁니다.

필드에 선언되는 변수에는 크게 "인스턴스 변수"와 "클래스 변수"가 있습니다.

                                           - 인스턴스 변수 = 각각의 개체마다 개별적인 속성을 가짐
                                           객체화 할 때마다 서로 다른 저장공간을 가짐

                                          -클래스 변수 =  변수 선언에 static을 써서 선언하며,모든 객체가 똑같은 속성을 가짐
                                           여러번 객체화시켜도 공통적인 저장공간

                                            필드 예약어중 또 하나인 final은 하나의 값만 계속 저장해야 하는 변수에 사용하는 예약어로,
                                                상수이며 값을 임의로 변경할 수 없습니다.(변수명은 암묵적으로 대문자로 쓰입니다.)

필드의 멤버변수값을 변경하는 방법중에 하나인 클래스 !!!!초기화블럭!!!!!은 인스턴스 변수와 클래스 변수의
초기화 방법이 다릅니다

-인스턴스 = {}중가로 안에서 초기화시키며 앞에 접근제한자나 예약어 아무 것도 쓰지 않음
                  객체 생성시마다 초기화

-클래스 = 앞에 static이라는 예약어를 쓴 후 {}중가로 안에 초기화시키며 프로그램 시작시 한 번만 초기화

필드 초기화 순서

-클래스 변수
JVM기본값 ==>명시적 초기값 ==>클래스 초기화 블록 초기값

-인스턴스 변수
JVM기본값 ==> 명시적 초기값 ==>인스턴스 초기화 블록 초기값 ==> 생성자를 통한 초기값






















